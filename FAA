/////////////////////////////////////////////////////////////////////////////////////////
Practical:1

Aim: 

def partition (array, low, high):
   pivot = array [high]
   i = low - 1
   for j in range (low, high):
       if array[j] <= pivot:
          i=i+1
          (array[i], array[j]) = (array[j], array[i])
       (array[i+1], array[high]) = (array[high], array[i + 1])
       return i+ 1
def quickSort (array, low, high):
   if low < high:
      pi= partition (array, low, high)
      quickSort (array, low, pi - 1)
      quickSort (array, pi + 1, high)
data = [68,2, 58, 63, 45, 44,10,8]
print ("Unsorted Array")
print (data)
size = len (data)
quickSort (data, 0, size - 1)
print('Sorted Array in Ascending Order:')
print (data)  

//////////////////////////////////////////////////////////////////////////////////////////
practical:2

Aim: Write a program to implement Merge sort algorithm for sorting a list of integers in 
ascending order.

CODE:


def mergeSort (myList):
   if len (myList) > 1:
       mid = len (myList) // 2
       left =myList[:mid]
       right = myList [mid:]
       mergeSort (left)
       mergeSort (right)
       i = 0
       j = 0

       k = 0
       while i<len (left) and j < len(right):
             if left [i] <= right [j]:
                myList [k] = left [i]
                i += 1
             else:
                  myList[k] = right [j]
                  j += 1
                  k += 1
            
             while i < len(left):
                    myList[k] = left [i]
                    i += 1
                    k += 1
             while j < len (right):
                    myList[k]=right[j]
                    j += 1
                    k += 1
myList = [-25, 25, 36, 1, 2, 65, 48, 72, -3]
mergeSort (myList)
print (myList)

/////////////////////////////////////////////////////////////////////////////////////////
Practical:3

Aim: Write program to implement the DFS and BFS algorithm for a graph.

CODE: 

graph = {
'5':['3','7'],
'3':['2','4'],
'7':['8'],
'2':[],
'4':['8'],
'8':[],
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node): #function for dfs
   if node not in visited:
     print (node)
     visited.add(node)
     for neighbour in graph[node]:
        dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '5')

/////////////////////////////////////////////////////////////////////////////////////////
Practical:4

Aim:Write program to implement backtracking algorithm for solving problems like Nqueens

CODE:

 graph = {
'5':['3','7'],
'3':['2','4'],
'7':['8'],
'2':[],
'4':['8'],
'8':[],
}

visited = [] # List for visited nodes.
queue = [] #Initialize a queue

def bfs(visited, graph, node): #function for BFS
   visited.append(node)
   queue.append(node)
   while queue: # Creating loop to visit each node
       m = queue.pop(0)
       print (m, end = "")
       for neighbour in graph[m]:
           if neighbour not in visited:
               visited.append(neighbour)
               queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5') # function calling   

/////////////////////////////////////////////////////////////////////////////////////////
practical 5

Aim:Write program to implement the DFS and BFS algorithm for a graph

CODE:

print ("Enter the number of queens")
N = int(input())


board = [[0]*N for _ in range (N)]

def is_attack (i, j):
    for k in range (0, N):
       if board[i] [k]==1 or board [k] [j]==1:
          return True
    for k in range (0,N):
       for l in range (0,N):
          if (k+1==i+j) or (k-1==i-j):
              if board[k] [1]==1:
                  return True
    return False
def N_queen (n):
    if n==0:
        return True
    for i in range (0,N):
         for j in range (0, N):
             if (not (is_attack(i,j))) and (board[i][j]!=1):
                 board[i][j] = 1
                 if N_queen (n-1)==True:
                      return True
                 board[i][j] = 0
    return False
N_queen (N)
for i in board:
     print (i) 


///////////////////////////////////////////////////////////////////////////////
practical 6

Aim: Write program to implement greedy algorithm for job sequencing with deadlines.

CODE:

graph = {
'5':['3','7'],
'3':['2','4'],
'7':['8'],
'2':[],
'4':['8'],
'8':[],
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node): #function for dfs
   if node not in visited:
     print (node)
     visited.add(node)
     for neighbour in graph[node]:
        dfs(visited, graph, neighbour)

print("Following is the Depth-First Search")
dfs(visited, graph, '5')





class Job:
     def __init__(self, taskId, deadline, profit):
         self.taskId = taskId
         self.deadline = deadline
         self.profit = profit
def scheduleJobs (jobs, T):
    profit = 0
    slot = [1] * T
    jobs.sort (key=lambda x: x.profit, reverse=True)
    for job in jobs:
        for j in reversed (range (job.deadline)):
           if j < T and slot [j] == -1:
                 slot [j] = job. taskid
                 profit+=job.profit
                 break
    print ('The scheduled jobs are', list (filter (lambda x: x != -1, slot)))
    
    print('The total profit earned is', profit)
    
if __name__=='__main__':
    jobs = [
         Job (1, 9, 15), Job (2, 2, 2), Job (3, 5, 18), Job (4, 7, 1), Job (5, 4, 25),
         Job (6, 2, 20), Job (7, 5, 8), Job (8, 7, 10), Job (9, 4, 12), Job (10, 3, 5)
    ]
    T = 15
    scheduleJobs (jobs, T)


//////////////////////////////////////////////////////////////////////////////////////////
Practical:7

Aim: Write a program to implement Dijkstra’s algorithm for the Single source shortest path 
problem.

CODE:

import sys
class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]
    def printMST(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])
    def minKey(self, key, mstSet):
 
    
        min = sys.maxsize
 
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v
 
        return min_index
    def primMST(self):
 
        # Key values used to pick minimum weight edge in cut
        key = [sys.maxsize] * self.V
        parent = [None] * self.V  # Array to store constructed MST
        # Make key 0 so that this vertex is picked as first vertex
        key[0] = 0
        mstSet = [False] * self.V
 
        parent[0] = -1  # First node is always the root of
 
        for cout in range(self.V):
 
            
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):
               if self.graph[u][v] > 0 and mstSet[v] == False \
                and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u
        self.printMST(parent)
if __name__ == '__main__':
    g = Graph(5)
    g.graph = [[0, 2, 0, 6, 0],
               [2, 0, 3, 8, 5],
               [0, 3, 0, 0, 7],
               [6, 8, 0, 0, 9],
               [0, 5, 7, 9, 0]]
 
    g.primMST()

//////////////////////////////////////////////////////////////////////////////////////
Practical:8

Aim: Write a program that implements Prim’s algorithm to generate minimum cost spanning 
tree. 

CODE:


class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])

    def apply_union(self, parent, rank, x, y):
        xroot = self.find(parent, x)
        yroot = self.find(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1


    def kruskal_algo(self):
        result = []
        i, e = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            u, v, w = self.graph[i]
            i = i + 1
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x != y:
                e = e + 1
                result.append([u, v, w])
                self.apply_union(parent, rank, x, y)
        for u, v, weight in result:
            print("%d - %d: %d" % (u, v, weight))


g = Graph(6)
g.add_edge(0, 1, 4)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 2)
g.add_edge(1, 0, 4)
g.add_edge(2, 0, 4)
g.add_edge(2, 1, 2)
g.add_edge(2, 3, 3)
g.add_edge(2, 5, 2)
g.add_edge(2, 4, 4)
g.add_edge(3, 2, 3)
g.add_edge(3, 4, 3)
g.add_edge(4, 2, 4)
g.add_edge(4, 3, 3)
g.add_edge(5, 2, 2)
g.add_edge(5, 4, 3)
g.kruskal_algo()

/////////////////////////////////////////////////////////////////////////////////
Practical:9

Aim: Write a program that implements Kruskal’s algorithm to generate minimum cost 
spanning tree 

CODE:

# Dijkstra's Algorithm in Python


import sys

# Providing the graph
vertices = [[0, 0, 1, 1, 0, 0, 0],
            [0, 0, 1, 0, 0, 1, 0],
            [1, 1, 0, 1, 1, 0, 0],
            [1, 0, 1, 0, 0, 0, 1],
            [0, 0, 1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1, 0, 1],
            [0, 0, 0, 1, 0, 1, 0]]

edges = [[0, 0, 1, 2, 0, 0, 0],
         [0, 0, 2, 0, 0, 3, 0],
         [1, 2, 0, 1, 3, 0, 0],
         [2, 0, 1, 0, 0, 0, 1],
         [0, 0, 3, 0, 0, 2, 0],
         [0, 3, 0, 0, 2, 0, 1],
         [0, 0, 0, 1, 0, 1, 0]]

# Find which vertex is to be visited next
def to_be_visited():
    global visited_and_distance
    v = -10
    for index in range(num_of_vertices):
        if visited_and_distance[index][0] == 0 \
            and (v < 0 or visited_and_distance[index][1] <=
                 visited_and_distance[v][1]):
            v = index
    return v


num_of_vertices = len(vertices[0])

visited_and_distance = [[0, 0]]
for i in range(num_of_vertices-1):
    visited_and_distance.append([0, sys.maxsize])

for vertex in range(num_of_vertices):

    # Find next vertex to be visited
    to_visit = to_be_visited()
    for neighbor_index in range(num_of_vertices):

        # Updating new distances
        if vertices[to_visit][neighbor_index] == 1 and \
                visited_and_distance[neighbor_index][0] == 0:
            new_distance = visited_and_distance[to_visit][1] \
                + edges[to_visit][neighbor_index]
            if visited_and_distance[neighbor_index][1] > new_distance:
                visited_and_distance[neighbor_index][1] = new_distance
        
        visited_and_distance[to_visit][0] = 1

i = 0

# Printing the distance
for distance in visited_and_distance:
    print("Distance of ", chr(ord('a') + i),
          " from source vertex: ", distance[1])
    i = i + 1


////////////////////////////////////////////////////////////////////////////////////////
Practical:10

Aim: Write program to implement Dynamic Programming algorithm for the 0/1 Knapsack 
problem.

CODE:


def knapSack(W, wt, val, n):

	# Base Case
	if n == 0 or W == 0:
		return 0
	if (wt[n-1] > W):
		return knapSack(W, wt, val, n-1)

	else:
		return max(
			val[n-1] + knapSack(
				W-wt[n-1], wt, val, n-1),
			knapSack(W, wt, val, n-1))

if __name__ == '__main__':
	profit = [60, 100, 120]
	weight = [10, 20, 30]
	W = 50
	n = len(profit)
	print(knapSack(W, weight, profit, n))
